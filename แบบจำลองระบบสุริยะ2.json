<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <title>‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏∏‡∏£‡∏¥‡∏¢‡∏∞ 3D</title>
  <style>
    body { margin: 0; background: black; overflow: hidden; color: white; }
    #infoBox {
      position: absolute;
      top: 20px;
      right: 20px;
      width: 300px;
      padding: 15px;
      background: rgba(0,0,0,0.7);
      border: 1px solid white;
      border-radius: 10px;
      display: none;
    }
    #infoBox h2 { margin: 0 0 10px; }
  </style>
</head>
<body>
  <div id="infoBox"></div>
  <script src="https://cdn.jsdelivr.net/npm/three@0.161.0/build/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.161.0/examples/js/controls/OrbitControls.js"></script>

  <script>
    // üöÄ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Scene
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(60, window.innerWidth/window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    // üîÜ ‡πÅ‡∏™‡∏á
    const light = new THREE.PointLight(0xffffff, 2, 1000);
    light.position.set(0,0,0);
    scene.add(light);

    // üåç ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡∏≤‡∏ß
    function createPlanet(size, textureUrl, x, name) {
      const texture = new THREE.TextureLoader().load(textureUrl);
      const geometry = new THREE.SphereGeometry(size, 32, 32);
      const material = new THREE.MeshStandardMaterial({ map: texture });
      const planet = new THREE.Mesh(geometry, material);
      planet.position.x = x;
      planet.userData = { name: name };
      scene.add(planet);
      return planet;
    }

    // ‚òÄÔ∏è ‡∏î‡∏ß‡∏á‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
    const sun = createPlanet(4, "https://upload.wikimedia.org/wikipedia/commons/4/4a/Sun_white.jpg", 0, "sun");

    // ü™ê ‡∏î‡∏≤‡∏ß‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    const planets = [
      createPlanet(0.5, "https://upload.wikimedia.org/wikipedia/commons/2/2e/Mercury_in_true_color.jpg", 8, "mercury"),
      createPlanet(0.9, "https://upload.wikimedia.org/wikipedia/commons/8/85/Venus_globe.jpg", 12, "venus"),
      createPlanet(1, "https://upload.wikimedia.org/wikipedia/commons/9/97/The_Earth_seen_from_Apollo_17.jpg", 16, "earth"),
      createPlanet(0.7, "https://upload.wikimedia.org/wikipedia/commons/0/02/OSIRIS_Mars_true_color.jpg", 20, "mars"),
      createPlanet(2, "https://upload.wikimedia.org/wikipedia/commons/e/e2/Jupiter.jpg", 28, "jupiter"),
      createPlanet(1.7, "https://upload.wikimedia.org/wikipedia/commons/c/c7/Saturn_during_Equinox.jpg", 36, "saturn"),
      createPlanet(1.5, "https://upload.wikimedia.org/wikipedia/commons/3/3d/Uranus2.jpg", 44, "uranus"),
      createPlanet(1.5, "https://upload.wikimedia.org/wikipedia/commons/5/56/Neptune_Full.jpg", 52, "neptune")
    ];

    // üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
    const planetData = {
      sun: {
        title: "‚òÄÔ∏è ‡∏î‡∏ß‡∏á‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå",
        info: "‡∏î‡∏≤‡∏ß‡∏§‡∏Å‡∏©‡πå‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏∏‡∏£‡∏¥‡∏¢‡∏∞<br>‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á: ‡πÅ‡∏Å‡∏ô‡∏Å‡∏•‡∏≤‡∏á (Core), ‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏û‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô (Convective Zone), ‡∏ä‡∏±‡πâ‡∏ô‡πÇ‡∏ü‡πÇ‡∏ï‡∏™‡πÄ‡∏ü‡∏µ‡∏¢‡∏£‡πå"
      },
      mercury: {
        title: "‚òø ‡∏î‡∏≤‡∏ß‡∏û‡∏∏‡∏ò",
        info: "‡∏î‡∏≤‡∏ß‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î<br>‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á: ‡πÅ‡∏Å‡∏ô‡πÄ‡∏´‡∏•‡πá‡∏Å‡πÉ‡∏´‡∏ç‡πà, ‡πÅ‡∏°‡∏ô‡πÄ‡∏ó‡∏¥‡∏•‡∏ö‡∏≤‡∏á, ‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏¥‡∏ô"
      },
      venus: {
        title: "‚ôÄ ‡∏î‡∏≤‡∏ß‡∏®‡∏∏‡∏Å‡∏£‡πå",
        info: "‡∏î‡∏≤‡∏ß‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡πâ‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î<br>‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á: ‡πÅ‡∏Å‡∏ô‡πÇ‡∏•‡∏´‡∏∞, ‡πÅ‡∏°‡∏ô‡πÄ‡∏ó‡∏¥‡∏•, ‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡∏≤"
      },
      earth: {
        title: "üåç ‡πÇ‡∏•‡∏Å",
        info: "‡∏ö‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤<br>‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á: ‡πÅ‡∏Å‡∏ô‡πÉ‡∏ô (Solid Iron), ‡πÅ‡∏Å‡∏ô‡∏ô‡∏≠‡∏Å (Liquid Iron), ‡πÅ‡∏°‡∏ô‡πÄ‡∏ó‡∏¥‡∏•, ‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏•‡∏Å"
      },
      mars: {
        title: "‚ôÇ ‡∏î‡∏≤‡∏ß‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£",
        info: "‡∏î‡∏≤‡∏ß‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏µ‡πÅ‡∏î‡∏á<br>‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á: ‡πÅ‡∏Å‡∏ô‡πÇ‡∏•‡∏´‡∏∞, ‡πÅ‡∏°‡∏ô‡πÄ‡∏ó‡∏¥‡∏•, ‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏≤‡∏á"
      },
      jupiter: {
        title: "‚ôÉ ‡∏î‡∏≤‡∏ß‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ",
        info: "‡∏î‡∏≤‡∏ß‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡πä‡∏≤‡∏ã‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î<br>‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á: ‡πÅ‡∏Å‡∏ô‡∏´‡∏¥‡∏ô/‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡πÄ‡∏•‡πá‡∏Å, ‡πÑ‡∏Æ‡πÇ‡∏î‡∏£‡πÄ‡∏à‡∏ô‡πÇ‡∏•‡∏´‡∏∞, ‡πÑ‡∏Æ‡πÇ‡∏î‡∏£‡πÄ‡∏à‡∏ô‡∏Å‡πä‡∏≤‡∏ã"
      },
      saturn: {
        title: "‚ôÑ ‡∏î‡∏≤‡∏ß‡πÄ‡∏™‡∏≤‡∏£‡πå",
        info: "‡∏°‡∏µ‡∏ß‡∏á‡πÅ‡∏´‡∏ß‡∏ô‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°<br>‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á: ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ (‡πÅ‡∏Å‡∏ô‡∏´‡∏¥‡∏ô‡πÄ‡∏•‡πá‡∏Å, ‡πÑ‡∏Æ‡πÇ‡∏î‡∏£‡πÄ‡∏à‡∏ô‡πÇ‡∏•‡∏´‡∏∞, ‡πÑ‡∏Æ‡πÇ‡∏î‡∏£‡πÄ‡∏à‡∏ô‡∏Å‡πä‡∏≤‡∏ã)"
      },
      uranus: {
        title: "‚ôÖ ‡∏î‡∏≤‡∏ß‡∏¢‡∏π‡πÄ‡∏£‡∏ô‡∏±‡∏™",
        info: "‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≤‡∏á<br>‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á: ‡πÅ‡∏Å‡∏ô‡∏´‡∏¥‡∏ô‡πÄ‡∏•‡πá‡∏Å, ‡πÅ‡∏°‡∏ô‡πÄ‡∏ó‡∏¥‡∏•‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á, ‡πÑ‡∏Æ‡πÇ‡∏î‡∏£‡πÄ‡∏à‡∏ô-‡∏Æ‡∏µ‡πÄ‡∏•‡∏µ‡∏¢‡∏°"
      },
      neptune: {
        title: "‚ôÜ ‡∏î‡∏≤‡∏ß‡πÄ‡∏ô‡∏õ‡∏à‡∏π‡∏ô",
        info: "‡∏•‡∏°‡πÅ‡∏£‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏∏‡∏£‡∏¥‡∏¢‡∏∞<br>‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á: ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏¢‡∏π‡πÄ‡∏£‡∏ô‡∏±‡∏™ (‡πÅ‡∏Å‡∏ô‡∏´‡∏¥‡∏ô‡πÄ‡∏•‡πá‡∏Å, ‡πÅ‡∏°‡∏ô‡πÄ‡∏ó‡∏¥‡∏•‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á, ‡πÑ‡∏Æ‡πÇ‡∏î‡∏£‡πÄ‡∏à‡∏ô-‡∏Æ‡∏µ‡πÄ‡∏•‡∏µ‡∏¢‡∏°)"
      }
    };

    // üëÜ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏≤‡∏ß
    const raycaster = new THREE.Raycaster();
    const mouse = new THREE.Vector2();
    window.addEventListener("click", (event) => {
      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
      raycaster.setFromCamera(mouse, camera);
      const intersects = raycaster.intersectObjects([sun, ...planets]);
      if (intersects.length > 0) {
        const planet = intersects[0].object.userData.name;
        const data = planetData[planet];
        const box = document.getElementById("infoBox");
        box.style.display = "block";
        box.innerHTML = `<h2>${data.title}</h2><p>${data.info}</p>`;
      }
    });

    // üé• ‡∏Å‡∏•‡πâ‡∏≠‡∏á + ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
    camera.position.z = 70;
    const controls = new THREE.OrbitControls(camera, renderer.domElement);

    // üîÑ Animation
    function animate() {
      requestAnimationFrame(animate);
      sun.rotation.y += 0.002;
      planets.forEach(p => p.rotation.y += 0.01);
      controls.update();
      renderer.render(scene, camera);
    }
    animate();
  </script>
</body>
</html>
